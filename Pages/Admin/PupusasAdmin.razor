@page "/admin"
@attribute [Authorize]
@using System.ComponentModel.Design.Serialization
@using Microsoft.AspNetCore.Authorization
@using PupaaS.Client.Models
@using PupaaS.Client.Services
@using PupaaS.Client.Components
@inject IPupusaService PupusaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDataGrid @ref="_dataGrid" 
             T="Pupusa" 
             ServerData="ServerReload"
             ReadOnly="false"
             SortMode="SortMode.None"
             Filterable
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             EditMode="DataGridEditMode.Form"
             CommittedItemChanges="@CommittedItemChanges" 
             Dense>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Pupusas</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@((s) => OnSearch(s))" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
        <MudIconButton Icon="@Icons.Material.Outlined.AddCircle" 
                       Size="Size.Large" 
                       Color="Color.Primary"
                       OnClick="DisplayAddForm"/>
    </ToolBarContent>
    
    <Columns>
        <PropertyColumn Property="pupusa => pupusa.Url" Title="Url" Editable="false" Filterable="false">
            <EditTemplate>
                <MudImage Src="@context.Item.Url" Elevation="25" Width="400" Height="400" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" Fluid Class="rounded-lg  mx-sm-4 mb-8"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="pupusa => pupusa.Dough" Title="Masa">
            <EditTemplate>
                <DoughSelect @bind-Dough="context.Item.Dough"/>
            </EditTemplate>
            <FilterTemplate>
                <DoughSelect 
                    @bind-Dough:get="_parameters.Dough" 
                    @bind-Dough:set="FilteringDough" 
                    Simple/>
            </FilterTemplate>
        </PropertyColumn>
        
        <TemplateColumn Title="Ingredientes" Filterable="true">
            <CellTemplate>
                @foreach (var ingredient in context.Item?.Ingredients ?? [])
                {
                    <MudChip T="string" Size="Size.Small">@ingredient</MudChip>
                }
            </CellTemplate>
            <EditTemplate>
                <IngredientSelect @bind-Ingredients="context.Item.Ingredients" />
            </EditTemplate>
            <FilterTemplate>
                <IngredientSelect 
                    @bind-Ingredients:get="_parameters.Ingredients" 
                    @bind-Ingredients:set="FilteringIngredients" 
                    Simple/>
            </FilterTemplate>
        </TemplateColumn>

        <TemplateColumn>
            <CellTemplate>
                <MudStack Row Spacing="2">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Class="mx-2" OnClick="@(_ => OnDelete(context.Item))"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    
    <PagerContent>
        <MudDataGridPager T="Pupusa" RowsPerPageString="Pupusas por página" InfoFormat="{first_item}-{last_item} de {all_items}"/>
    </PagerContent>
</MudDataGrid>

<MudMessageBox @ref="_deleteMessageBox" Title="Eliminar pupusa" CancelText="Cancelar">
    <MessageContent>
        ¿Seguro que desea eliminar?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Eliminar</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    private MudDataGrid<Pupusa>? _dataGrid;
    private MudMessageBox? _deleteMessageBox;
    private PupusaParameters _parameters = new();
    

    private async Task<GridData<Pupusa>> ServerReload(GridState<Pupusa> state)
    {
        _parameters.Page = state.Page + 1;
        _parameters.PageSize = state.PageSize;
        var data = await PupusaService.GetPupusasAsync(_parameters);
        
        return new GridData<Pupusa>
        {
            TotalItems = data?.TotalItems ?? 0,
            Items = data?.Items ?? []
        };
    }

    private Task OnSearch(string s)
    {
        _parameters.Search = s;
        return _dataGrid?.ReloadServerData() ?? Task.CompletedTask;
    }
    
    // Editing hooks
    // NOTE: UI is updated regardless of this method's result
    private async Task CommittedItemChanges(Pupusa pupusa)
    {
        var result = await PupusaService.UpdatePupusaAsync(pupusa);

        if (result is null)
        {
            Snackbar.Add("No fue posible guardar los cambios", Severity.Error);
            return;
        }

        Snackbar.Add("Pupusa modificada", Severity.Success);
    }

    private Task DisplayAddForm()
    {
        var options = new DialogOptions()
        {
            FullWidth = true,
            BackdropClick = false,
        };
        return DialogService.ShowAsync<AddPupusaDialog>(null, options);
    }
    
    private async Task OnDelete(Pupusa? pupusa)
    {
        if (pupusa is null) return;
        
        bool? yesDelete = await _deleteMessageBox!.ShowAsync()!;
        if (!(yesDelete ?? false))
            return;
        
        var deleted = await PupusaService.DeletePupusaAsync(pupusa);
        if (!deleted)
        {
            Snackbar.Add("No fue posible eliminar", Severity.Error);
            return;
        }
        
        Snackbar.Add("Pupusa eliminada", Severity.Success);
        _dataGrid?.ReloadServerData();
    }

    private void FilteringDough(string? dough)
    {
        _parameters.Dough = dough;
        _dataGrid?.ReloadServerData();
        
    }
    private void FilteringIngredients(IEnumerable<string>? ingredients)
    {
        _parameters.Ingredients = ingredients;
        _dataGrid?.ReloadServerData();
        
    }
}
